// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Marker {
  id                      Int    @id @default(autoincrement())
  lat                     Float
  lng                     Float
  address                 String
  title                   String
  description             String
  mood                    String? //peaceful, party,
  mustSee                 String? //sunset, sunrise, stars, landscape, beach, city, monuments
  suggestedWith           String? //friends, alone, girlfriend, everyone
  suggestedAgeFrom        Int?
  suggestedAgeTo          Int?
  suggestedSpotifySongUrl String? //url to spotify song

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  MarkerComment MarkerComment[]
  MarkerVisit   MarkerVisit[] // Relation to track visits

  @@index([title])
}

model MarkerComment {
  id   Int    @id @default(autoincrement())
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  marker   Marker @relation(fields: [markerId], references: [id], onDelete: Cascade)
  markerId Int

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  CommentLike CommentLike[]
}

model CommentLike {
  id        Int           @id @default(autoincrement())
  commentId Int
  userId    String
  comment   MarkerComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([commentId, userId])
}

model MarkerVisit {
  id        Int      @id @default(autoincrement())
  markerId  Int
  userId    String
  visitedAt DateTime @default(now()) // Automatically records the time of the visit
  marker    Marker   @relation(fields: [markerId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([markerId, userId]) // Ensures a user can mark a marker as visited only once
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]

  Marker        Marker[]
  MarkerComment MarkerComment[]
  CommentLike   CommentLike[]
  MarkerVisit   MarkerVisit[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
